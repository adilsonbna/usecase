name: Build and Push Docker Image to Docker Hub with SHA Tagging

on:
  push:
    branches:
      - main # Trigger on pushes to the `main` branch
  pull_request:
    branches:
      - main # Trigger on pull requests to `main`

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up the Docker tag using GitHub SHA
    - name: Set Docker tag
      id: vars
      run: |
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7) # Extract first 7 characters of SHA
        echo "TAG=${SHORT_SHA}" >> $GITHUB_ENV
        echo "LATEST_TAG=latest" >> $GITHUB_ENV

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username stored in secrets
        password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub password stored in secrets

    # Step 4: Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/pos-sytem-usecase:${{ env.TAG }} ci
        docker tag ${{ secrets.DOCKER_USERNAME }}/pos-sytem-usecase:${{ env.TAG }} ${{ secrets.DOCKER_USERNAME }}/pos-sytem-usecase:${{ env.LATEST_TAG }}

    # Step 5: Tricy Scan Images
    - name: Run Trivy Scan
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
        # Run Trivy scan and output as JSON
        ./bin/trivy image --severity CRITICAL --no-progress --format json ${{ secrets.DOCKER_USERNAME }}/pos-sytem-usecase:${{ env.LATEST_TAG }} > trivy-results.json

        # Check if the JSON contains any vulnerabilities
        if ! jq -e '.Results[].Vulnerabilities | length > 0' trivy-results.json > /dev/null; then
          echo "No vulnerabilities found or Trivy results are empty."
          SLACK_MESSAGE="*Trivy Scan: SUCCESS* - No critical vulnerabilities found in Docker image '${{ env.TAG }}'."
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${SLACK_MESSAGE}\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
          exit 0
        fi

        # Count critical vulnerabilities
        CRITICAL_COUNT=$(jq '[.Results[].Vulnerabilities[] | select(.Severity=="CRITICAL")] | length' trivy-results.json)
        echo "Critical vulnerabilities found: $CRITICAL_COUNT"

        # Generate table data for Slack
        TABLE=$(jq -r '
          .Results[].Vulnerabilities[] | 
          select(.Severity=="CRITICAL") | 
          "- *ID*: \(.VulnerabilityID)\n  *Severity*: \(.Severity)\n  *Package*: \(.PkgName)\n  *Version*: \(.InstalledVersion)\n  *Description*: \(.Description | .[:100])\n"
        ' trivy-results.json)

        # Slack message construction
        if [ "$CRITICAL_COUNT" -gt 10 ]; then
          SLACK_MESSAGE="*Trivy Scan: FAILED* - More than 10 critical vulnerabilities found in Docker image '${{ env.TAG }}'.\n\n*Details:*\n$TABLE"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${SLACK_MESSAGE}\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
          exit 1
        else
          SLACK_MESSAGE="*Trivy Scan: SUCCESS* - Scan completed for Docker image '${{ env.TAG }}'. Critical vulnerabilities: $CRITICAL_COUNT.\n\n*Details:*\n$TABLE"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${SLACK_MESSAGE}\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

    # Step 6: Push the Docker image to Docker Hub
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/pos-sytem-usecase:${{ env.TAG }}
        docker push ${{ secrets.DOCKER_USERNAME }}/pos-sytem-usecase:${{ env.LATEST_TAG }}

    
